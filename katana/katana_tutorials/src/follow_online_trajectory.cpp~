/*
 * follow_joint_trajectory_client.cpp
 *
 *  Created on: 06.11.2011
 *      Author: martin
 */

#include <katana_tutorials/follow_joint_trajectory_client.h>

namespace katana_tutorials
{

FollowJointTrajectoryClient::FollowJointTrajectoryClient() :
    traj_client_("/katana_arm_controller/follow_joint_trajectory", true), got_joint_state_(false), spinner_(1)
{
  joint_names_.push_back("katana_motor1_pan_joint");
  joint_names_.push_back("katana_motor2_lift_joint");
  joint_names_.push_back("katana_motor3_lift_joint");
  joint_names_.push_back("katana_motor4_lift_joint");
  joint_names_.push_back("katana_motor5_wrist_roll_joint");

  joint_state_sub_ = nh_.subscribe("/joint_states", 1, &FollowJointTrajectoryClient::jointStateCB, this);
  spinner_.start();

  // wait for action server to come up
  while (!traj_client_.waitForServer(ros::Duration(5.0)))
  {
    ROS_INFO("Waiting for the follow_joint_trajectory server");
  }
}

FollowJointTrajectoryClient::~FollowJointTrajectoryClient()
{
}

void FollowJointTrajectoryClient::jointStateCB(const sensor_msgs::JointState::ConstPtr &msg)
{
  std::vector<double> ordered_js;

  ordered_js.resize(joint_names_.size());

  for (size_t i = 0; i < joint_names_.size(); ++i)
  {
    bool found = false;
    for (size_t j = 0; j < msg->name.size(); ++j)
    {
      if (joint_names_[i] == msg->name[j])
      {
        ordered_js[i] = msg->position[j];
        found = true;
        break;
      }
    }
    if (!found)
      return;
  }

  ROS_INFO_ONCE("Got joint state!");
  current_joint_state_ = ordered_js;
  got_joint_state_ = true;
}

//! Sends the command to start a given trajectory
void FollowJointTrajectoryClient::startTrajectory(control_msgs::FollowJointTrajectoryGoal goal)
{
  // When to start the trajectory: 1s from now
  goal.trajectory.header.stamp = ros::Time::now() + ros::Duration(1);
  traj_client_.sendGoal(goal);
}

control_msgs::FollowJointTrajectoryGoal FollowJointTrajectoryClient::makeArmUpTrajectory()
{
  const size_t NUM_TRAJ_POINTS = 12;
  const size_t NUM_JOINTS = 5;

  // positions after calibration
  std::vector<double> calibration_positions(NUM_JOINTS);
  calibration_positions[0] = -2.96;
  calibration_positions[1] = 2.14;
  calibration_positions[2] = -2.16;
  calibration_positions[3] = -1.97;
  calibration_positions[4] = -2.93;

  // arm pointing straight up
  std::vector<double> straight_up_positions(NUM_JOINTS);
  straight_up_positions[0] = 0.0;
  straight_up_positions[1] = 1.57;
  straight_up_positions[2] = 0.0;
  straight_up_positions[3] = 0.0;
  straight_up_positions[4] = 0.0;

// 1 position
std::vector<double> pos_1(NUM_JOINTS);
pos_1[0] =-0.55 ; 
pos_1[1] =1.01 ; 
pos_1[2] =-0.80 ; 
pos_1[3] =0;
pos_1[4] =0;
// 2 position
std::vector<double> pos_2(NUM_JOINTS);
pos_2[0] =-0.32 ; 
pos_2[1] =1.01 ; 
pos_2[2] =-0.33 ; 
pos_2[3] =0;
pos_2[4] =0;
// 3 position
std::vector<double> pos_3(NUM_JOINTS);
pos_3[0] =1.34 ; 
pos_3[1] =0.42 ; 
pos_3[2] =0.70 ; 
pos_3[3] =0;
pos_3[4] =0;
// 4 position
std::vector<double> pos_4(NUM_JOINTS);
pos_4[0] =-0.00 ; 
pos_4[1] =-0.05 ; 
pos_4[2] =1.73 ; 
pos_4[3] =0;
pos_4[4] =0;
// 5 position
std::vector<double> pos_5(NUM_JOINTS);
pos_5[0] =-0.31 ; 
pos_5[1] =0.80 ; 
pos_5[2] =1.80 ; 
pos_5[3] =0;
pos_5[4] =0;
// 6 position
std::vector<double> pos_6(NUM_JOINTS);
pos_6[0] =-1.81 ; 
pos_6[1] =1.63 ; 
pos_6[2] =0.77 ; 
pos_6[3] =0;
pos_6[4] =0;
// 7 position
std::vector<double> pos_7(NUM_JOINTS);
pos_7[0] =-1.22 ; 
pos_7[1] =2.10 ; 
pos_7[2] =-0.26 ; 
pos_7[3] =0;
pos_7[4] =0;
// 8 position
std::vector<double> pos_8(NUM_JOINTS);
pos_8[0] =0.47 ; 
pos_8[1] =1.75 ; 
pos_8[2] =-0.50 ; 
pos_8[3] =0;
pos_8[4] =0;
// 9 position
std::vector<double> pos_9(NUM_JOINTS);
pos_9[0] =1.59 ; 
pos_9[1] =2.13 ; 
pos_9[2] =-1.02 ; 
pos_9[3] =0;
pos_9[4] =0;
// 10 position
std::vector<double> pos_10(NUM_JOINTS);
pos_10[0] =0.11 ; 
pos_10[1] =1.22 ; 
pos_10[2] =-1.07 ; 
pos_10[3] =0;
pos_10[4] =0;
// 11 position
std::vector<double> pos_11(NUM_JOINTS);
pos_11[0] =-0.55 ; 
pos_11[1] =1.01 ; 
pos_11[2] =-0.80 ; 
pos_11[3] =0;
pos_11[4] =0;





  

  trajectory_msgs::JointTrajectory trajectory;

  for (ros::Rate r = ros::Rate(10); !got_joint_state_; r.sleep())
  {
    ROS_DEBUG("waiting for joint state...");

    if (!ros::ok())
      exit(-1);
  }

  // First, the joint names, which apply to all waypoints
  trajectory.joint_names = joint_names_;

  trajectory.points.resize(NUM_TRAJ_POINTS);

  // trajectory point:
  int ind = 0;
  trajectory.points[ind].time_from_start = ros::Duration(ind);
  trajectory.points[ind].positions = current_joint_state_;

  /*// trajectory point:
  ind++;
  trajectory.points[ind].time_from_start = ros::Duration(ind);
  trajectory.points[ind].positions = calibration_positions;

  // trajectory point:
  ind++;
  trajectory.points[ind].time_from_start = ros::Duration(ind);
  trajectory.points[ind].positions = straight_up_positions;

  // trajectory point:
  ind++;
  trajectory.points[ind].time_from_start = ros::Duration(ind);
  trajectory.points[ind].positions = calibration_positions;*/

  // trajectory point: to exo idi steilei sto pos_1
  ind++;
  trajectory.points[ind].time_from_start = ros::Duration(ind);
  trajectory.points[ind].positions = pos_1;
  // trajectory point:
  ind++;
  trajectory.points[ind].time_from_start = ros::Duration(ind);
  trajectory.points[ind].positions = pos_2;
  // trajectory point:
  ind++;
  trajectory.points[ind].time_from_start = ros::Duration(ind);
  trajectory.points[ind].positions = pos_3;
  
  // trajectory point:
  ind++;
  trajectory.points[ind].time_from_start = ros::Duration(ind);
  
  trajectory.points[ind].positions = pos_4;
  // trajectory point:
  ind++;
  trajectory.points[ind].time_from_start = ros::Duration(ind);
  trajectory.points[ind].positions = pos_5;
  // trajectory point:
  ind++;
  trajectory.points[ind].time_from_start = ros::Duration(ind);
  trajectory.points[ind].positions = pos_6;

  // trajectory point:
  ind++;
  trajectory.points[ind].time_from_start = ros::Duration(ind);
  
  trajectory.points[ind].positions = pos_7;
  // trajectory point:
  ind++;
  trajectory.points[ind].time_from_start = ros::Duration(ind);

  trajectory.points[ind].positions = pos_8;
  // trajectory point:
  ind++;
  trajectory.points[ind].time_from_start = ros::Duration(ind);
  trajectory.points[ind].positions = pos_9;

  // trajectory point:
  ind++;
  trajectory.points[ind].time_from_start = ros::Duration(ind);
  
  trajectory.points[ind].positions = pos_10;
  // trajectory point:
  ind++;
  trajectory.points[ind].time_from_start = ros::Duration(ind);

  trajectory.points[ind].positions = pos_11;

  /*// trajectory point:
  ind++;
  trajectory.points[ind].time_from_start = ros::Duration(ind);

  trajectory.points[ind].positions = pos_12;
 
  // trajectory point:
  ind++;
  trajectory.points[ind].time_from_start = ros::Duration(ind);
  trajectory.points[ind].positions.resize(NUM_JOINTS);
  trajectory.points[ind].positions = pos_13;
 

  // trajectory point:
  ind++;
  trajectory.points[ind].time_from_start = ros::Duration(ind);

  trajectory.points[ind].positions = pos_14;
 
  // trajectory point:
  ind++;
  trajectory.points[ind].time_from_start = ros::Duration(ind);

  trajectory.points[ind].positions = pos_15;*/
 

 
 

  //  // all Velocities 0
  //  for (size_t i = 0; i < NUM_TRAJ_POINTS; ++i)
  //  {
  //    trajectory.points[i].velocities.resize(NUM_JOINTS);
  //    for (size_t j = 0; j < NUM_JOINTS; ++j)
  //    {
  //      trajectory.points[i].velocities[j] = 0.0;
  //    }
  //  }

  control_msgs::FollowJointTrajectoryGoal goal;
  goal.trajectory = trajectory;
  return goal;
}

//! Returns the current state of the action
actionlib::SimpleClientGoalState FollowJointTrajectoryClient::getState()
{
  return traj_client_.getState();
}
/*
trajectory_msgs::JointTrajectory FollowJointTrajectoryClient::filterJointTrajectory(
    const trajectory_msgs::JointTrajectory &input)
{
  ros::service::waitForService("trajectory_filter/filter_trajectory");
  arm_navigation_msgs::FilterJointTrajectory::Request req;
  arm_navigation_msgs::FilterJointTrajectory::Response res;
  ros::ServiceClient filter_trajectory_client_ = nh_.serviceClient<arm_navigation_msgs::FilterJointTrajectory>(
      "trajectory_filter/filter_trajectory");

  req.trajectory = input;
  req.allowed_time = ros::Duration(1.0);

  if (filter_trajectory_client_.call(req, res))
  {
    if (res.error_code.val == res.error_code.SUCCESS)
      ROS_INFO("Requested trajectory was filtered");
    else
      ROS_WARN("Requested trajectory was not filtered. Error code: %d", res.error_code.val);
  }
  else
  {
    ROS_ERROR("Service call to filter trajectory failed %s", filter_trajectory_client_.getService().c_str());
  }

  return res.trajectory;
}*/

} /* namespace katana_tutorials */

int main(int argc, char** argv)
{
  // Init the ROS node
  ros::init(argc, argv, "follow_joint_trajectory_client");

  katana_tutorials::FollowJointTrajectoryClient arm;
  // Start the trajectory
  for (int i=1;i<=10;i++){
    arm.startTrajectory(arm.makeArmUpTrajectory());
    // Wait for trajectory completion
    while (!arm.getState().isDone() && ros::ok())
    {
      usleep(50000);
    }
  };
}
